// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "github.com/github.com/vido21/dating-app/premium-packages/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// PremiumPackageService is an autogenerated mock type for the PremiumPackageService type
type PremiumPackageService struct {
	mock.Mock
}

// FindPremiumPackageByID provides a mock function with given fields: id
func (_m *PremiumPackageService) FindPremiumPackageByID(id uuid.UUID) (*models.PremiumPackage, error) {
	ret := _m.Called(id)

	var r0 *models.PremiumPackage
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.PremiumPackage); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PremiumPackage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPremiumPackageByIDs provides a mock function with given fields: ids
func (_m *PremiumPackageService) FindPremiumPackageByIDs(ids []uuid.UUID) (*[]models.PremiumPackage, error) {
	ret := _m.Called(ids)

	var r0 *[]models.PremiumPackage
	if rf, ok := ret.Get(0).(func([]uuid.UUID) *[]models.PremiumPackage); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.PremiumPackage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsConsistsUnlimitedQuotaPackage provides a mock function with given fields: premiumPackages
func (_m *PremiumPackageService) IsConsistsUnlimitedQuotaPackage(premiumPackages []models.PremiumPackage) bool {
	ret := _m.Called(premiumPackages)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]models.PremiumPackage) bool); ok {
		r0 = rf(premiumPackages)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsConsistsVerifiedUserPackage provides a mock function with given fields: premiumPackages
func (_m *PremiumPackageService) IsConsistsVerifiedUserPackage(premiumPackages []models.PremiumPackage) bool {
	ret := _m.Called(premiumPackages)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]models.PremiumPackage) bool); ok {
		r0 = rf(premiumPackages)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
